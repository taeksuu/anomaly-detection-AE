from __future__ import print_function, division
import os
import torch
import pandas as pd
from skimage import io, transform
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as img
import cv2
from torch.utils.data import Dataset, DataLoader

import warnings
warnings.filterwarnings("ignore")

plt.ion()


category = ['bottle', 'cable', 'capsule', 'carpet', 'grid', 'hazelnut','leather', 'metal_nut', 
            'pill', 'screw', 'tile', 'toothbrush','transistor', 'wood', 'zipper']

objects = ['bottle', 'cable', 'capsule', 'hazelnut', 'metal_nut', 
            'pill', 'screw', 'toothbrush','transistor', 'zipper']

textiles = ['carpet', 'grid', 'leather', 'tile', 'wood']


class MVTecADDataset(Dataset):
    
    def __init__(self, directory, mode, size, transform=None):
        """
        directory (string): directory to all images
        mode (string): select between train, validation or test
        transform(callable, optional): optional transform to be applied on a sample
        """
        super(MVTecADDataset, self).__init__()
        
        self.directory = directory
        self.mode = mode
        self.transform = transform
        self.items = []
        
    def __len__(self):
        return len(self.items)
    
    def __getitem__(self, idx):        
        return items[idx]
    
    
    def image2mask(directory):
        """
        Returns the corresponding mask directory for the given image directory if it has one(mode="validation", mode="test" & abnormal). 
        Else, returns None(mode="train",  mode="test" & normal).
        
        directory (string): directory to specific image
        """
        if self.mode == "train" or (self.mode == "test" and directory.find("good") >= 0): #directory에 또 다른 good이 들어가면 문제가 생김
            return None
        else:
            main, sub = directory.split("test") #directory에 또 다른 test가 들어가면 문제가 생김
            details, extension = sub.split(".")
            return main + "ground_truth" + details + "_mask." + extension
        
        
class RandomCrop(object):
    """
    Randomly crops the image
    """
    def __init__(self, size):
        self.size = size

    def __call__(self, item):
        image, label, mask = item['image'], item['label'], item['mask']
        height, width = image.shape[:2]
        new_height, new_width = self.size, self.size

        top = np.random.randint(0, height - new_height)
        left = np.random.randint(0, width - new_width)

        image = image[top:top + new_height, left:left + new_width]
        mask = mask[top:top + new_height, left:left + new_width]

        return {'image': image, 'label': label, 'mask': mask}
    
class RandomTranslation(object):
    """
    Randomly translates the image
    """
    def __init__(self, max_amount):
        self.max_amount = max_amount
    
    def __call__(self, item):
        image, label, mask = item['image'], item['label'], item['mask']
        hshift, vshift = np.random.randint(0, self.max_amount), np.random.randint(0, self.max_amount)
        
        h, w, n = image.shape
        M = np.float32([[1,0,hshift],[0,1,vshift]])
        
        image = cv2.warpAffine(image, M, (h, w))
        mask = cv2.warpAffine(mask, M, (h, w))
        
        return {'image': image, 'label': label, 'mask': mask}
    
class RandomRotation(object):
    """
    Randomly rotataes the image
    """
    def __init__(self, max_amount):
        self.max_amount = max_amount
    
    def __call__(self, item):
        image, label, mask = item['image'], item['label'], item['mask']
        angle = np.random.randint(0, self.max_amount)
        
        image = transform.rotate(image, angle)
        mask = transform.rotate(mask, angle)
        
        return {'image': image, 'label': label, 'mask': mask}
